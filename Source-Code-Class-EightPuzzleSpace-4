import java.util.Vector;

public class EightPuzzleSpace {
    Node getRoot() {
        int example[] = {1, 2, 3, 4, 5, 6, 7, 8, 0};
        return new Node(example, null);
    }

    Node getGoal() {
        int state[] = {1, 2, 3, 4, 0, 5, 6, 7, 8};
        return new Node(state, null);
    }

    Vector<Node> getSuccessors(Node parent) {
        Vector<Node> successors = new Vector<>();
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                // Ubin kosong di sini
                if (parent.state[(r * 3) + c] == 0) {
                    // Memindahkan ubin ke kiri
                    if (r > 0) {
                        successors.add(transformState(r - 1, c, r, c, parent));
                    }
                    // Memindahkan ubin ke kanan
                    if (r < 2) {
                        successors.add(transformState(r + 1, c, r, c, parent));
                    }
                    // Memindahkan ubin dari bawah
                    if (c > 0) {
                        successors.add(transformState(r, c - 1, r, c, parent));
                    }
                    // Memindahkan ubin dari atas
                    if (c < 2) {
                        successors.add(transformState(r, c + 1, r, c, parent));
                    }
                }
            }
        }
        // Digunakan dalam getTree
        parent.getSuccessors = successors;
        return successors;
    }

    Node transformState(int r0, int c0, int r1, int c1, Node parent) {
        int[] s = parent.state;
        int[] newState = {s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], s[8]};
        newState[(r1 * 3) + c1] = s[(r0 * 3) + c0];
        newState[(r0 * 3) + c0] = 0;
        return new Node(newState, parent);
    }
}

